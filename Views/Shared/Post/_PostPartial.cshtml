@using System.Security.Claims
@using SimpleSocialApp.Data.Enums
@using SimpleSocialApp.Models.ViewModels.Posts
@model List<PostViewModel>
@{
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
}

@foreach(var postModel in Model)
{
    <div class="post card shadow-sm mb-4 d-flex align-items-center">
        <div class="post-header card-header d-flex justify-content-between align-items-left w-100">
            <div class="post-user">
                <div class="post-user-info"> 
                <img src="@(!string.IsNullOrEmpty(@postModel.Post.User.Media?.Url) ? @postModel.Post.User.Media.Url : "/images/profile_default/default_avatar.jpg")"
                     alt="@postModel.Post.User.FirstName @postModel.Post.User.LastName" />   
                <h5 class="mb-0">@postModel.Post.User.FirstName @postModel.Post.User.LastName</h5>
                </div>
                <span class="text-muted small">@postModel.Post.CreatedDateTime.ToString("MMM dd, yyyy")</span>
            </div>
            @if (postModel.Post.UserId == currentUserId)
            {
                <div class="post-actions">
                    <a href="@Url.Action("Edit", "Post", new { postId = postModel.Post.Id })" class="btn btn-outline-primary btn-sm mx-1">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a href="@Url.Action("Delete", "Post", new { postId = postModel.Post.Id })" class="btn btn-outline-danger btn-sm mx-1">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </div>
            }
        </div>

        <div class="post-content card-body">
            <div class="d-flex flex-column align-items-start">
                <p class="w-100 text-start">
                    @postModel.Post.Content
                </p>

                <div class="post-media w-100 position-relative">
                    @if (postModel.Post.Media.Any())
                    {
                        var firstMedia = postModel.Post.Media.First();
                        var remainingMedia = postModel.Post.Media.Skip(1).ToList();
                        var remainingCount = remainingMedia.Count;

                        <div class="media-wrapper position-relative">
                            <!-- First image (Main) -->
                            <a href="@firstMedia.Url" class="glightbox" data-gallery="post-gallery-@postModel.Post.Id">
                                <img src="@firstMedia.Url" alt="Post Image" class="img-fluid rounded shadow-sm main-image" />
                            </a>

                            @if (remainingMedia.Any())
                            {
                                var secondMedia = remainingMedia.First();
                                var remainingAfterSecond = remainingMedia.ToList();

                                <!-- Second image (Partially Visible Behind) -->
                                <div class="second-image">
                                    <img src="@secondMedia.Url" alt="Post Image" class="img-fluid rounded shadow-sm" />
                                </div>

                                <!-- +X more Indicator -->
                                @if (remainingAfterSecond.Count > 0)
                                {
                                    <div class="more-indicator" onclick="openLightbox('@postModel.Post.Id')">
                                        <span class="more-text">+@remainingAfterSecond.Count more</span>
                                    </div>
                                }
                            }
                        </div>

                        <!-- Hidden links for the rest of the images -->
                        @foreach (var media in remainingMedia)
                        {
                            <a href="@media.Url" class="glightbox d-none" data-gallery="post-gallery-@postModel.Post.Id"></a>
                        }
                    }
                </div>

            </div>
        </div>


        @if (ViewData["ShowActions"] as bool? ?? true)
        {
            <div class="post-footer card-footer bg-light d-flex justify-content-between align-items-center w-100">
                <div class="actions">
                <span id="like-count-@postModel.Post.Id" class="like-count">
                    <i class="bi bi-hand-thumbs-up"></i> <span class="like-number">@postModel.LikesCount</span>
                </span>                    <span class="comment-count"><i class="bi bi-chat-left"></i> @postModel.CommentsCount</span>
                </div>

                <div class="buttons">
                    <button class="btn btn-outline-primary like-button" data-target-type="Post" data-target-id="@postModel.Post.Id">
                        <i class="bi bi-hand-thumbs-up"></i> Like
                    </button>
                    @if (ViewData["IsCommentView"] as bool? ?? true)
                    {
                        <a href="@Url.Action("Details", "Post", new { postId = postModel.Post.Id })" class="btn btn-outline-secondary">
                            <i class="bi bi-chat-left-text"></i> Comments
                        </a>
                    }
                </div>
            </div>
        }
    </div>

}
<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<!-- GLightbox CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css" />
<!-- GLightbox JS -->
<script src="https://cdn.jsdelivr.net/npm/glightbox/dist/js/glightbox.min.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const lightbox = GLightbox({
            selector: ".glightbox",
            touchNavigation: true,
            loop: true, // Enables continuous navigation
            autoplayVideos: true
        });
    });


</script>
<style>
    .media-wrapper {
        position: relative;
        display: inline-block;
    }
    .post-user
    {
        display: flex;
        flex-direction: column;
    }
    .post-user-info
    {
        display: flex;
        align-items: center;
    }
    .post-user-info img{
        width: 40px;
        height: 40px;
        margin-right: 10px;
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid #ddd;
    }
    .main-image {
        width: 100%;
        height: auto;
        border-radius: 10px;
        display: block;
        position: relative;
        z-index: 2;
    }

    /* Second image stacked behind */
    .second-image {
        position: absolute;
        top: 10px; /* Slight vertical shift */
        right: -20px; /* Shifted to the right */
        width: 96%;
        height: 100%;
        border-radius: 10px;
        overflow: hidden;
        cursor: pointer;
        z-index: 1;
        opacity: 0.8;
    }

        .second-image img {
            width: 100%;
            height: auto;
            border-radius: 10px;
            filter: brightness(70%); /* Darker to indicate it's behind */
            transition: 0.3s;
        }

    /* +X more Indicator */
    .more-indicator {
        position: absolute;
        top: 50%;
        right: -30px;
        transform: translateY(-50%);
        width: 60px;
        height: 60px;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        color: white;
        font-size: 14px;
        font-weight: bold;
        cursor: pointer;
        z-index: 3;
    }

</style>