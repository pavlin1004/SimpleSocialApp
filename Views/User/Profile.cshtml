@using System.Security.Claims
@using SimpleSocialApp.Data.Enums
@model SimpleSocialApp.Models.ViewModels.AppUserViewModel

@{
    var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
    var userProfilePictureUrl = Model.User.Media?.Url;

    ViewData["ShowActions"] = true;
    ViewData["IsCommentView"] = true;
}

<div class="profile-header">
    <!-- Profile Picture on Left -->
    <div class="profile-picture">
        @if (string.IsNullOrEmpty(userProfilePictureUrl))
        {
            <div class="no-profile-picture">
                <p>No profile picture set.</p>
                @if (Model.IsCurrentUser)
                {
                    <p><a href="@Url.Action("EditProfilePicture", "User")">Add a picture</a></p>
                }
            </div>
        }
        else
        {
            <img src="@userProfilePictureUrl" alt="Profile Picture" class="img-fluid rounded-circle" />
        }
    </div>

    <!-- Profile Info in Center -->
    <div class="profile-info">
        <h1>@Model.User.FirstName @Model.User.LastName</h1>
        @if (Model.IsCurrentUser)
        {
            <p class="this-is-your-profile">This is your profile.</p>
        }
    </div>

    <!-- Friendship Status -->
    <div class="friendship-status">
        @if (Model.IsCurrentUser == false)
        {
            @if (Model.FriendshipStatus == null)
            {
                <!-- No friendship relationship -->
                <form method="post" action="@Url.Action("SendFriendRequest", "User", new { userId = Model.User.Id })">
                    <button type="submit" class="btn btn-primary">Send Friend Request</button>
                </form>
            }
            else if (Model.FriendshipStatus.Type == FriendshipType.Pending && Model.FriendshipStatus.SenderId != currentUserId)
            {
                <!-- Friendship request sent by the current user (pending on the other side) -->
                <form method="post" action="@Url.Action("AcceptFriendshipRequest", "User", new { userId = Model.User.Id })">
                    <button type="submit" class="btn btn-success">Accept</button>
                </form>
                <form method="post" action="@Url.Action("RemoveFriendship", "User", new { userId = Model.User.Id })">
                    <button type="submit" class="btn btn-danger">Reject</button>
                </form>
            }
            else if (Model.FriendshipStatus.Type == FriendshipType.Pending && Model.FriendshipStatus.SenderId == currentUserId)
            {
                <!-- Friend request sent by current user, allow cancel -->
                <form method="post" action="@Url.Action("RemoveFriendship", "User", new { userId = Model.User.Id })">
                    <button type="submit" class="btn btn-warning">Cancel Request</button>
                </form>
            }
            else if (Model.FriendshipStatus.Type == FriendshipType.Accepted)
            {
                <!-- They are friends -->
                <button class="btn btn-info" disabled>Friends</button>
                <form method="post" action="@Url.Action("RemoveFriendship", "User", new { userId = Model.User.Id })">
                    <button type="submit" class="btn btn-danger">Remove Friend</button>
                </form>
            }
        }
    </div>
</div>

<!-- User's Posts -->
<div class="posts-section">
    <h3>Posts</h3>
    @foreach (var post in Model.Posts)
    {
        @await Html.PartialAsync("_PostPartial", post)
    }
</div>

<script type="text/javascript" src="~/js/like-handler.js"></script>